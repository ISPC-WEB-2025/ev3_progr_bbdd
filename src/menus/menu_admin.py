from src.menus.menu import MenuBase
from src.models.usuario_estandar import UsuarioEstandar
from src.models.admin import Admin
from src.utils.func_aux import pausar, validar_contrasena
# from datetime import datetime

# Simulamos el almacenamiento de usuarios en memoria
# Esta estructura ser√° modificada por las funciones de gesti√≥n de usuarios
# No est√° duplicado?    
USUARIOS_REGISTRADOS = {
    'admin': Admin("admin", "Administrador", "del Sistema", "admin123", 
                    "admin@sistema.com", "+54-11-1234-5678", "Av. Principal 123", perfil_id=1),
    'usuario1': UsuarioEstandar("usuario1", "Juan", "P√©rez", "user123", 
                                "juan.perez@email.com", "+54-11-9876-5432", "Calle Falsa 456", perfil_id=2),
    'maria': UsuarioEstandar("maria", "Mar√≠a", "Garc√≠a", "maria456", 
                              "maria.garcia@email.com", "", "Av. Libertador 789", perfil_id=3)
}

class MenuAdmin(MenuBase):
    def __init__(self, sistema):
        super().__init__(sistema)
    
    def mostrar_opcion(self, numero, emoji, texto):
        """Muestra una opci√≥n del men√∫ con formato"""
        print(f"{numero}. {emoji} {texto}")
    
    def obtener_opcion(self, max_opciones):
        """Obtiene y valida la opci√≥n seleccionada por el usuario"""
        while True:
            opcion = input(f"Seleccione una opci√≥n (1-{max_opciones}): ").strip()
            if opcion.isdigit() and 1 <= int(opcion) <= max_opciones:
                return opcion
            print("\n‚ùå Opci√≥n no v√°lida.")
            pausar()
    
    def mostrar_menu(self):
        """Muestra el men√∫ para administradores"""
        while True:
            self.mostrar_encabezado("üëë MEN√ö ADMINISTRADOR")
            
            self.mostrar_opcion(1, "üë•", "Gesti√≥n de Usuarios")
            self.mostrar_opcion(2, "‚öôÔ∏è", "Configuraci√≥n del sistema")
            self.mostrar_opcion(3, "üö™", "Cerrar sesi√≥n")
            print()
            
            opcion = self.obtener_opcion(3)
            
            if opcion == '1':
                self.gestionar_usuarios()
            elif opcion == '2':
                self.configuracion_sistema()
            elif opcion == '3':
                self.sistema.cerrar_sesion()
                break
            else:
                print("\n‚ùå Opci√≥n no v√°lida.")
                pausar()
    
    def mostrar_encabezado(self, titulo):
        """Muestra el encabezado del men√∫"""
        from src.utils.func_aux import limpiar_pantalla, mostrar_titulo
        limpiar_pantalla()
        mostrar_titulo(titulo)
        if hasattr(self.sistema, 'usuario_actual') and self.sistema.usuario_actual:
            print(f"Usuario: {self.sistema.usuario_actual.perfil.nombre_completo}")
        print()
    
    def mostrar_lista_usuarios(self):
        """Muestra la lista de usuarios registrados"""
        self.mostrar_encabezado("üë• LISTA DE USUARIOS")
        
        print("üëë ADMINISTRADORES:")
        for nombre_usuario, usuario in self.sistema.usuarios.items():
            if usuario.es_admin():
                info = usuario.obtener_info()
                print(f"\nID: {info['id_usuario']} | Usuario: {nombre_usuario}")
                print(f"Nombre: {info['nombre']} {info['apellido']}")
                print(f"Email: {usuario.perfil.email}")
                print(f"ID Perfil: {usuario.perfil.id_perfil}")
                print("-" * 40)
        
        print("\nüë§ USUARIOS EST√ÅNDAR:")
        for nombre_usuario, usuario in self.sistema.usuarios.items():
            if not usuario.es_admin():
                info = usuario.obtener_info()
                print(f"\nID: {info['id_usuario']} | Usuario: {nombre_usuario}")
                print(f"Nombre: {info['nombre']} {info['apellido']}")
                print(f"Email: {usuario.perfil.email}")
                print(f"ID Perfil: {usuario.perfil.id_perfil}")
                print("-" * 40)
        
        pausar()

    def mostrar_menu_principal(self):
        """Muestra el men√∫ principal del administrador"""
        while True:
            self.mostrar_encabezado("PANEL DE ADMINISTRADOR")
            
            self.mostrar_opcion(1, "üë•", "Gestionar Usuarios")
            self.mostrar_opcion(2, "üìä", "Ver Reportes del Sistema")
            self.mostrar_opcion(3, "‚öôÔ∏è", "Configuraci√≥n")
            self.mostrar_opcion(4, "üö™", "Cerrar Sesi√≥n")
            
            opcion = self.obtener_opcion(4) # Limita las opciones v√°lidas a 1-4
            
            if opcion == '1':
                self.gestionar_usuarios()
            elif opcion == '2':
                self.ver_reportes()
            elif opcion == '3':
                self.configuracion()  
            elif opcion == '4':
                print("\nüëã Cerrando sesi√≥n de administrador...")
                pausar()
                break
            else:
                print("\n‚ùå Opci√≥n no v√°lida.")
                pausar()
    
    def gestionar_usuarios(self):
        """Men√∫ de gesti√≥n de usuarios"""
        while True:
            self.mostrar_encabezado("üë• GESTI√ìN DE USUARIOS")
            
            self.mostrar_opcion(1, "üìù", "Ver lista de usuarios")
            self.mostrar_opcion(2, "‚ûï", "Agregar usuario")
            self.mostrar_opcion(3, "üîç", "Ver detalles de usuario")
            self.mostrar_opcion(4, "‚öôÔ∏è ", "Cambiar rol de usuario")
            self.mostrar_opcion(5, "‚ùå", "Eliminar usuario")
            self.mostrar_opcion(6, "üè†", "Volver al men√∫ principal")
            print()
            
            opcion = self.obtener_opcion(6)  # Limita las opciones v√°lidas a 1-6
            
            if opcion == '1':
                self.mostrar_lista_usuarios()
            elif opcion == '2':
                self.agregar_usuario()
            elif opcion == '3':
                self.ver_detalles_usuario()
            elif opcion == '4':
                self.cambiar_rol_usuario()
            elif opcion == '5':
                self.eliminar_usuario()
            elif opcion == '6':
                break
            else:
                print("\n‚ùå Opci√≥n no v√°lida.")
                pausar()
    
    def obtener_todos_usuarios(self):
        """Obtiene todos los usuarios del sistema"""
        return self.sistema.usuarios
    
    def ver_detalles_usuario(self):
        """Muestra detalles completos de un usuario"""
        self.mostrar_encabezado("üîç DETALLES DE USUARIO")
        
        nombre_usuario = input("Usuario a consultar: ").strip()
        
        if nombre_usuario in self.sistema.usuarios:
            usuario = self.sistema.usuarios[nombre_usuario]
            info = usuario.obtener_info()
            perfil = usuario.perfil.obtener_resumen()
            
            print(f"\nüìã PERFIL DE {nombre_usuario.upper()}:")
            print(f"   ‚Ä¢ ID Usuario: {info['id_usuario']}")
            print(f"   ‚Ä¢ ID Perfil: {perfil['id_perfil']}")
            print(f"   ‚Ä¢ Nombre: {info['nombre']}")
            print(f"   ‚Ä¢ Apellido: {info['apellido']}")
            print(f"   ‚Ä¢ Email: {perfil['email']}")
            print(f"   ‚Ä¢ Tel√©fono: {perfil['telefono']}")
            print(f"   ‚Ä¢ Direcci√≥n: {perfil['direccion']}")
            print(f"   ‚Ä¢ Tipo de cuenta: {'üëë Administrador' if usuario.es_admin() else 'üë§ Usuario Est√°ndar'}")
            
            esta_completo = "‚úÖ Completo" if usuario.perfil.tiene_datos_completos() else "‚ö†Ô∏è Incompleto"
            print(f"   ‚Ä¢ Estado del perfil: {esta_completo}")
        else:
            print("\n‚ùå Usuario no encontrado.")
        
        pausar()
    
    def agregar_usuario(self):
        """Agrega un nuevo usuario al sistema"""
        self.mostrar_encabezado("‚ûï AGREGAR USUARIO")
        
        # 1. Solicitar nombre de usuario
        nombre_usuario = input("Nombre de usuario: ").strip()
        if nombre_usuario in self.sistema.usuarios:
            print("\n‚ùå El nombre de usuario ya existe.")
            pausar()
            return
        
        # 2. Solicitar y validar contrase√±a
        while True:
            contrasena = input("Contrase√±a: ").strip()
            es_valida, mensaje = validar_contrasena(contrasena)
            if es_valida:
                break
            print(f"\n‚ùå {mensaje}")
            if input("\n¬øDesea intentar de nuevo? (s/n): ").lower() != 's':
                return
        
        # 3. Solicitar datos del perfil
        print("\nüìã DATOS DEL PERFIL")
        nombre = input("Nombre: ").strip()
        apellido = input("Apellido: ").strip()
        email = input("Email: ").strip()
        telefono = input("Tel√©fono (opcional): ").strip()
        direccion = input("Direcci√≥n (opcional): ").strip()
        
        # 4. Crear el usuario (siempre como est√°ndar)
        nuevo_usuario = UsuarioEstandar(nombre_usuario, nombre, apellido, contrasena, 
                                      email, telefono, direccion)
        
        # 5. Agregar al sistema
        self.sistema.usuarios[nombre_usuario] = nuevo_usuario
        
        # 6. Mostrar confirmaci√≥n
        print(f"\n‚úÖ Usuario '{nombre_usuario}' creado exitosamente como Usuario Est√°ndar.")
        print(f"   ‚Ä¢ Nombre: {nombre} {apellido}")
        print(f"   ‚Ä¢ Email: {email}")
        if telefono:
            print(f"   ‚Ä¢ Tel√©fono: {telefono}")
        if direccion:
            print(f"   ‚Ä¢ Direcci√≥n: {direccion}")
        
        pausar()

    def cambiar_rol_usuario(self):
        """Permite cambiar el rol de un usuario entre est√°ndar y administrador"""
        self.mostrar_encabezado("üîÑ CAMBIAR ROL DE USUARIO")
        
        nombre_usuario = input("Usuario a modificar: ").strip()
        if nombre_usuario not in self.sistema.usuarios:
            print("\n‚ùå Usuario no encontrado.")
            pausar()
            return
            
        usuario = self.sistema.usuarios[nombre_usuario]
        rol_actual = "Administrador" if usuario.es_admin() else "Usuario Est√°ndar"
        
        print(f"\nRol actual: {rol_actual}")
        print("\n¬øA qu√© rol desea cambiarlo?")
        print("1. Usuario Est√°ndar")
        print("2. Administrador")
        
        opcion = input("\nSeleccione una opci√≥n (1-2): ").strip()
        
        if opcion not in ['1', '2']:
            print("\n‚ùå Opci√≥n no v√°lida.")
            pausar()
            return
            
        nuevo_rol = "Usuario Est√°ndar" if opcion == '1' else "Administrador"
        
        # Si el usuario ya tiene el rol seleccionado
        if (opcion == '1' and not usuario.es_admin()) or (opcion == '2' and usuario.es_admin()):
            print(f"\n‚ö†Ô∏è El usuario ya es {nuevo_rol}.")
            pausar()
            return
            
        # Confirmar cambio
        confirmacion = input(f"\n¬øEst√° seguro de cambiar el rol de '{nombre_usuario}' a {nuevo_rol}? (s/n): ").strip().lower()
        if confirmacion != 's':
            print("\n‚ùå Operaci√≥n cancelada.")
            pausar()
            return
            
        # Crear nuevo usuario con el rol seleccionado
        perfil = usuario.perfil
        if opcion == '1':
            nuevo_usuario = UsuarioEstandar(nombre_usuario, perfil.nombre, perfil.apellido, 
                                          usuario.contrasena, perfil.email, perfil.telefono, 
                                          perfil.direccion, perfil_id=perfil.id_perfil)
        else:
            nuevo_usuario = Admin(nombre_usuario, perfil.nombre, perfil.apellido, 
                                usuario.contrasena, perfil.email, perfil.telefono, 
                                perfil.direccion, perfil_id=perfil.id_perfil)
        
        # Reemplazar usuario existente
        self.sistema.usuarios[nombre_usuario] = nuevo_usuario
        
        print(f"\n‚úÖ Rol de '{nombre_usuario}' cambiado exitosamente a {nuevo_rol}.")
        pausar()
    
    def eliminar_usuario(self):
        """Elimina un usuario del sistema"""
        self.mostrar_encabezado("‚ùå ELIMINAR USUARIO")
        
        nombre_usuario = input("Usuario a eliminar: ").strip()
        
        if nombre_usuario not in self.sistema.usuarios:
            print("\n‚ùå Usuario no encontrado.")
            pausar()
            return
            
        usuario = self.sistema.usuarios[nombre_usuario]
        
        # Verificar si es el √∫nico administrador
        if usuario.es_admin():
            admins = [u for u in self.sistema.usuarios.values() if u.es_admin()]
            if len(admins) == 1:
                print("\n‚ùå No se puede eliminar el √∫nico administrador del sistema.")
                pausar()
                return
        
        confirmacion = input(f"\n¬øEst√° seguro de eliminar al usuario '{nombre_usuario}'? (s/n): ").strip().lower()
        if confirmacion == 's':
            del self.sistema.usuarios[nombre_usuario]
            print(f"\n‚úÖ Usuario '{nombre_usuario}' eliminado exitosamente.")
        else:
            print("\n‚ùå Operaci√≥n cancelada.")
        
        pausar()
    
    def ver_reportes(self):
        """Muestra reportes del sistema"""
        self.mostrar_encabezado("REPORTES DEL SISTEMA")
        
        usuarios = self.obtener_todos_usuarios()
        total_usuarios = len(usuarios)
        admins = len([u for u in usuarios.values() if u.tipo == 'admin'])
        usuarios_std = len([u for u in usuarios.values() if u.tipo == 'usuario'])
        perfiles_completos = len([u for u in usuarios.values() if u.perfil.tiene_datos_completos()])
        
        print("üìä ESTAD√çSTICAS GENERALES:")
        print(f"   ‚Ä¢ Total de usuarios: {total_usuarios}")
        print(f"   ‚Ä¢ Administradores: {admins}")
        print(f"   ‚Ä¢ Usuarios est√°ndar: {usuarios_std}")
        print(f"   ‚Ä¢ Perfiles completos: {perfiles_completos}/{total_usuarios}")
        
        # Informaci√≥n de actividad reciente (simulada)
        print("\nüìã ACTIVIDAD RECIENTE:")
        print("   ‚Ä¢ √öltimo inicio de sesi√≥n: Hace 5 minutos")
        print("   ‚Ä¢ √öltima modificaci√≥n: Hace 10 minutos")
        print("   ‚Ä¢ Estado del sistema: Activo")
        
        print()
        
        pausar()
    
    def configuracion(self):
        """Muestra configuraci√≥n del sistema"""
        self.mostrar_encabezado("CONFIGURACI√ìN DEL SISTEMA")
        
        print("‚öôÔ∏è CONFIGURACI√ìN ACTUAL:")
        print("   ‚Ä¢ Versi√≥n del sistema: 1.0.0")
        print("   ‚Ä¢ M√°ximo intentos de login: 3")
        print("   ‚Ä¢ Encriptaci√≥n: SHA256")
        print("   ‚Ä¢ Estado del sistema: ‚úÖ Operativo")
        print()
        
        pausar()

    def configuracion_sistema(self):
        """Muestra y permite modificar la configuraci√≥n del sistema"""
        while True:
            self.mostrar_encabezado("‚öôÔ∏è CONFIGURACI√ìN DEL SISTEMA")
            
            print("1. Cambiar contrase√±a de administrador")
            print("2. Ver pol√≠ticas de contrase√±as")
            print("3. Configurar notificaciones")
            print("4. Volver al men√∫ principal")
            print()
            
            opcion = input("Seleccione una opci√≥n (1-4): ").strip()
            
            if opcion == "1":
                self.cambiar_contrasena_admin()
            elif opcion == "2":
                self.mostrar_politicas_contrasena()
            elif opcion == "3":
                self.configurar_notificaciones()
            elif opcion == "4":
                break
            else:
                print("\n‚ùå Opci√≥n no v√°lida.")
                pausar()
    
    def cambiar_contrasena_admin(self):
        """Permite cambiar la contrase√±a del administrador actual"""
        self.mostrar_encabezado("üîê CAMBIAR CONTRASE√ëA")
        
        contrasena_actual = input("Contrase√±a actual: ").strip()
        if self.sistema.usuario_actual.verificar_contrasena(contrasena_actual):
            while True:
                nueva_contrasena = input("Nueva contrase√±a: ").strip()
                es_valida, mensaje = validar_contrasena(nueva_contrasena)
                if es_valida:
                    confirmar = input("Confirmar nueva contrase√±a: ").strip()
                    if nueva_contrasena == confirmar:
                        self.sistema.usuario_actual.contrasena = nueva_contrasena
                        print("\n‚úÖ Contrase√±a actualizada exitosamente.")
                        break
                    else:
                        print("\n‚ùå Las contrase√±as no coinciden.")
                else:
                    print(f"\n‚ùå {mensaje}")
                    if input("\n¬øDesea intentar de nuevo? (s/n): ").lower() != 's':
                        break
        else:
            print("\n‚ùå Contrase√±a actual incorrecta.")
        
        pausar()
    
    def mostrar_politicas_contrasena(self):
        """Muestra las pol√≠ticas de contrase√±as del sistema"""
        self.mostrar_encabezado("üìù POL√çTICAS DE CONTRASE√ëAS")
        
        print("Requisitos de contrase√±a:")
        print("   ‚Ä¢ Longitud m√≠nima: 6 caracteres")
        print("   ‚Ä¢ Debe contener al menos una letra")
        print("   ‚Ä¢ Debe contener al menos un n√∫mero")
        print("   ‚Ä¢ No se permiten caracteres especiales")
        print("\nüí° Recomendaciones:")
        print("   ‚Ä¢ Use una contrase√±a √∫nica para este sistema")
        print("   ‚Ä¢ No comparta su contrase√±a con nadie")
        print("   ‚Ä¢ Cambie su contrase√±a peri√≥dicamente")
        
        pausar()
    
    def configurar_notificaciones(self):
        """Permite configurar las notificaciones del sistema"""
        self.mostrar_encabezado("üîî CONFIGURACI√ìN DE NOTIFICACIONES")
        
        print("Estado actual de las notificaciones:")
        print("   ‚Ä¢ Notificaciones por email: Activadas")
        print("   ‚Ä¢ Notificaciones de seguridad: Activadas")
        print("   ‚Ä¢ Reportes semanales: Desactivados")
        print("\n‚ö†Ô∏è  Esta funcionalidad est√° en desarrollo.")
        print("   Las notificaciones se implementar√°n en una futura versi√≥n.")
        
        pausar()
    