from src.utils.func_aux import *
from src.models.usuario_estandar import UsuarioEstandar
from src.models.perfil import Perfil

class MenuBase:
    def __init__(self, sistema):
        self.sistema = sistema
    
    def mostrar_encabezado(self, titulo):
        """Muestra el encabezado del men√∫"""
        limpiar_pantalla()
        mostrar_titulo(titulo)
        if hasattr(self.sistema, 'usuario_actual') and self.sistema.usuario_actual:
            print(f"Usuario: {self.sistema.usuario_actual.perfil.nombre_completo}")
        print()
    
    def mostrar_opcion(self, numero, emoji, texto):
        """Muestra una opci√≥n del men√∫ con formato"""
        print(f"{numero}. {emoji} {texto}")
    
    def obtener_opcion(self, max_opciones):
        """Obtiene y valida la opci√≥n seleccionada por el usuario"""
        while True:
            opcion = input(f"\nSeleccione una opci√≥n (1-{max_opciones}): ").strip()
            if opcion.isdigit() and 1 <= int(opcion) <= max_opciones:
                return opcion
            else:
                print("\n‚ùå Opci√≥n no v√°lida.")
                pausar()
                return None
    
    def _recopilar_datos_perfil(self):
        """
        M√©todo auxiliar para recolectar los datos espec√≠ficos del perfil.
        Devuelve un diccionario con los datos del perfil.
        """
        datos_perfil = {}
        print("\nüìã DATOS DEL PERFIL")

        # --- Validaciones y Recolecci√≥n de Datos de Perfil ---
        # Nombre (obligatorio)
        while True:
            nombre = input("Nombre: ").strip()
            if not nombre:
                print("\n‚ùå El nombre es obligatorio.")
                if input("\n¬øDesea intentar de nuevo? (s/n): ").lower() != 's':
                    break # Salimos del bucle, nombre queda vac√≠o
                continue
            break
        datos_perfil['nombre'] = nombre

        # Apellido (obligatorio)
        while True:
            apellido = input("Apellido: ").strip()
            if not apellido:
                print("\n‚ùå El apellido es obligatorio.")
                if input("\n¬øDesea intentar de nuevo? (s/n): ").lower() != 's':
                    break
                continue
            break
        datos_perfil['apellido'] = apellido

        # Email (opcional pero con validaci√≥n de formato)
        while True:
            email = input("Email (opcional): ").strip()
            if not email:
                break
            if '@' not in email or '.' not in email:
                print("\n‚ùå El formato del email no es v√°lido.")
                print("   Debe ser formato: usuario@dominio.com")
                if input("\n¬øDesea intentar de nuevo? (s/n): ").lower() != 's':
                    break
                continue
            break
        datos_perfil['email'] = email

        datos_perfil['telefono'] = input("Tel√©fono (opcional): ").strip()
        datos_perfil['direccion'] = input("Direcci√≥n (opcional): ").strip()

        return datos_perfil
    

    def _recopilar_datos_nuevo_usuario(self):
        """Recopila los datos necesarios para crear un nuevo usuario"""       
        self.mostrar_encabezado("üë§ CREAR NUEVO USUARIO")
        datos_recopilados = {}

        # 1. Solicitar nombre de usuario
        nombre_usuario = None
        while True: # Bucle para asegurar un nombre de usuario √∫nico
            nombre_usuario_input = input("Nombre de usuario: ").strip()
            nombre_usuario_normalizado = nombre_usuario_input.lower() # Normalizar para la verificaci√≥n

            if nombre_usuario_normalizado in self.sistema.usuarios:
                print("\n‚ùå Este nombre de usuario ya existe. Por favor, elija otro.")
                # No pausar aqu√≠ para permitir un nuevo intento inmediato en el bucle
            else:
                break # Nombre de usuario √∫nico, salimos del bucle
        nombre_usuario = nombre_usuario_normalizado
        datos_recopilados['nombre_usuario'] = nombre_usuario
        print(f"\n‚úÖ Nombre de usuario '{nombre_usuario}' aceptado.")
                
        # 2. Recoger y validar contrase√±a
        contrasena = None
        while True:
            contrasena = input("Contrase√±a: ").strip()
            es_valida, mensaje = validar_contrasena(contrasena)
            if es_valida:
                break
            print(f"\n‚ùå {mensaje}")
            if input("\n¬øDesea intentar de nuevo? (s/n): ").lower() != 's':
                return 
        datos_recopilados['contrasena'] = contrasena
        print(f"\n‚úÖ Contrase√±a aceptada para '{nombre_usuario}'.")
        
        #3. Recoger datos del perfil
        # Preguntar si desea completar el perfil ahora
        datos_perfil = {}
        print("\n¬øDesea completar los datos del perfil ahora?")
        print("1. S√≠, completar ahora")
        print("2. No, completar m√°s tarde")
            
        opcion = input("\nSeleccione una opci√≥n (1-2): ").strip()
        if opcion == "1":
            datos_perfil = self._recopilar_datos_perfil()
        elif opcion == "2":
            print("\n‚úÖ Puede completar el perfil m√°s tarde.")
        else:
            print("\n‚ùå Opci√≥n no v√°lida. No se completar√° el perfil ahora.")
            pausar()
        datos_recopilados['datos_perfil'] = datos_perfil
        return datos_recopilados
    
    def crear_usuario(self):
        """Permite crear un nuevo usuario est√°ndar, delegando la l√≥gica al sistema."""

        # 1. Recolecta todos los datos usando el m√©todo com√∫n de MenuBase
        datos = self._recopilar_datos_nuevo_usuario()
        if datos is None: # Si el usuario cancel√≥ en alg√∫n punto de la recolecci√≥n
            return False

        # 2. Delega la creaci√≥n real del usuario al sistema
        
        nuevo_usuario = self.sistema.crear_nuevo_usuario(
            nombre_usuario=datos['nombre_usuario'],
            contrasena=datos['contrasena'],
            datos_perfil=datos['datos_perfil']   # Este men√∫ siempre crea usuarios est√°ndar
        )

        # 3. Muestra el resultado de la operaci√≥n
        if nuevo_usuario:
            print(f"\n‚úÖ Usuario '{nuevo_usuario.nombre_usuario}' creado exitosamente como Usuario Est√°ndar.")
            # Accede a los datos del perfil a trav√©s de nuevo_usuario.perfil
            if nuevo_usuario.perfil.nombre and nuevo_usuario.perfil.apellido:
                print(f"    ‚Ä¢ Nombre: {nuevo_usuario.perfil.nombre} {nuevo_usuario.perfil.apellido}")
            if nuevo_usuario.perfil.email:
                print(f"    ‚Ä¢ Email: {nuevo_usuario.perfil.email}")
            if nuevo_usuario.perfil.telefono:
                print(f"    ‚Ä¢ Tel√©fono: {nuevo_usuario.perfil.telefono}")
            if nuevo_usuario.perfil.direccion:
                print(f"    ‚Ä¢ Direcci√≥n: {nuevo_usuario.perfil.direccion}")
            print(f"    ‚Ä¢ ID Perfil: {nuevo_usuario.perfil.id_perfil}")

            if not nuevo_usuario.perfil.tiene_datos_completos():
                print("\n‚ö†Ô∏è  El perfil est√° incompleto. Deber√° completar los datos obligatorios para continuar accediendo al sistema.")
            pausar() # Usa pausar() de func_aux
            return True
        else:
            print("\n‚ùå No se pudo crear el usuario (posiblemente ya existe o hubo un error interno).")
            pausar() # Usa pausar() de func_aux
            return False


class MenuPrincipal(MenuBase):
    def __init__(self, sistema):
        super().__init__(sistema)    

    
    def mostrar_menu_principal(self):
        """Muestra el men√∫ principal del sistema"""
        while True:
            self.mostrar_encabezado("üè¢ SISTEMA DE GESTI√ìN")
            print("1. Iniciar sesi√≥n")
            print("2. Crear nuevo usuario")
            print("3. Ver credenciales de prueba")
            print("4. Salir")
            print()
            
            opcion = input("Seleccione una opci√≥n (1-4): ").strip()
            
            if opcion == "1":
                if self.sistema.intentar_login():
                    if self.sistema.usuario_actual.es_admin():
                        # Importamos aqu√≠ para evitar importaci√≥n circular
                        from src.menus.menu_admin import MenuAdmin
                        menu_admin = MenuAdmin(self.sistema)
                        menu_admin.mostrar_menu()
                    else:
                        # Importamos aqu√≠ para evitar importaci√≥n circular
                        from src.menus.menu_usuario_est import MenuUsuario
                        menu_usuario = MenuUsuario(self.sistema)
                        menu_usuario.mostrar_menu()
            elif opcion == "2":
                self.crear_usuario()
            elif opcion == "3":
                self.sistema.mostrar_credenciales_prueba()
            elif opcion == "4":
                print("\nüëã ¬°Gracias por usar el sistema!")
                break
            else:
                print("\n‚ùå Opci√≥n no v√°lida. Intente nuevamente.")
                pausar()
    
    
      
        

